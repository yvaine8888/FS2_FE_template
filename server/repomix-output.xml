This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
index.js
package.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
node_modules/
</file>

<file path="index.js">
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mysql = require('mysql2');

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());
app.use(bodyParser.urlencoded({ extended: true }));

// âœ… Using mysql2 + dotenv
// TODO: Configure this pool with your schema credentials from Lesson 9.
const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

// TODO: Implement /submit-form to handle form data and insert into your database
app.post('/submit-form', (req, res) => {
  res.status(501).json({ message: 'Not implemented yet' });
});

// Optional: quick health check
app.get('/health', (req, res) => res.json({ ok: true }));

app.get('/api/ecommerce/products', (req, res) => {
  const sql = 'SELECT * FROM products';

  db.query(sql, (err, rows) => {
    if (err) {
      console.error('Error fetching products:', err);
      return res.status(500).json({ message: 'Database error' });
    }

    res.setHeader('Content-Type', 'application/json');
    res.json(rows);
  });
});

app.post('/api/ecommerce/cart', (req, res) => {
  const { product } = req.body;

  if (!product) {
    return res.status(400).json({ message: 'Product data is required.' });
  }

  const sql =
    'INSERT INTO cart (id, name, description, image_url, price) VALUES (?, ?, ?, ?, ?)';
  const values = [
    product.id,
    product.name,
    product.description,
    product.image_url,
    product.price,
  ];

  db.query(sql, values, (err, result) => {
    if (err) {
      console.error('Error adding product to cart:', err);
      return res.status(500).send('Server error');
    }

    res.json(result);
  });
});

app.delete('/api/ecommerce/cart/:id', (req, res) => {
  const { id } = req.params;

  const sql = 'DELETE FROM cart WHERE id = ?';

  db.query(sql, [id], (err, result) => {
    if (err) {
      console.error('Error removing product from cart:', err);
      return res.status(500).send('Server error');
    }

    res.json(result);
  });
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
</file>

<file path="package.json">
{
  "name": "server",
  "version": "1.0.0",
  "description": "Express server for lesson form submissions",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "mysql": "^2.18.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.3"
  }
}
</file>

</files>
